diff --git a/node_modules/ethers/dist/ethers.umd.js b/node_modules/ethers/dist/ethers.umd.js
index f6de08a..1b8fccc 100644
--- a/node_modules/ethers/dist/ethers.umd.js
+++ b/node_modules/ethers/dist/ethers.umd.js
@@ -1,3 +1,4 @@
+var RNScrypt = require("react-native-scrypt").default;
 (function (global, factory) {
 	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
 	typeof define === 'function' && define.amd ? define(['exports'], factory) :
@@ -19271,19 +19272,19 @@
 	            return new Promise(function(resolve, reject) {
 	                let lastProgress = 0;
 	                if (progressCallback) { progressCallback(0); }
-	                _scrypt(password, salt, N, r, p, dkLen, function(error, progress, key) {
-	                    if (error) {
-	                        reject(error);
-	                    } else if (key) {
-	                        if (progressCallback && lastProgress !== 1) {
-	                            progressCallback(1);
-	                        }
-	                        resolve(new Uint8Array(key));
-	                    } else if (progressCallback && progress !== lastProgress) {
-	                        lastProgress = progress;
-	                        return progressCallback(progress);
-	                    }
-	                });
+                  // convert salt to RNScrypt accepted value
+                  var _salt = Object.keys(salt)
+                      .map(function (key) { return salt[key]; })
+                      .filter(function (v) { return Number.isInteger(v); });
+                  // convert password to RNScrypt accepted value
+                  var _password = lib$8.toUtf8String(password);
+                  RNScrypt(_password, _salt, N, r, p, dkLen).then(function(key) {
+                      if (key) {
+                          if (progressCallback) { progressCallback(1) };
+                          resolve(utils$1.looseArrayify(key));
+                      }
+                  })
+                  .catch(function(error) { reject(error); });
 	            });
 	        },
 	        syncScrypt: function(password, salt, N, r, p, dkLen) {
