apply plugin: "com.android.application"
apply plugin: "com.facebook.react"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: 'com.google.gms.google-services' // @react-native-firebase/app init, react-native-notification
apply plugin: 'com.google.firebase.crashlytics' // react-native-firebase/crashlytics
apply plugin: 'com.google.firebase.firebase-perf'

/**
* This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    // cliFile = file("../../node_modules/react-native/cli.js")
    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]
    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []
    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

project.ext.react = [
    enableHermes: false,  // clean and rebuild if changing
    // custom build params:
    bundleInDebug: false,
    bundleInRelease: true,
    bundleInStaging: true,
    devDisabledInStaging: true,
    // bundle in multiple files, ref â€“ https://reactnative.dev/docs/ram-bundles-inline-requires#enable-the-ram-format
    bundleCommand: "ram-bundle",
]


/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = io.github.react-native-community:jsc-android-intl:2026004.+`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

// custom keystore properties file load:
def keystorePropertiesFile = rootProject.file("keystores/keystore.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdkVersion rootProject.ext.compileSdkVersion

    signingConfigs {
        debug {
            storeFile file('../keystores/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        staging {
            keyAlias System.getenv('ANDROID_STAGING_KEY_ALIAS') ? System.getenv('ANDROID_STAGING_KEY_ALIAS').toString() : keystoreProperties['stagingKeyAlias']
            keyPassword System.getenv('ANDROID_STAGING_KEY_PASSWORD') ? System.getenv('ANDROID_STAGING_KEY_PASSWORD').toString() : keystoreProperties['stagingKeyPassword']
            storeFile file('../keystores/staging-key.keystore')
            storePassword System.getenv('ANDROID_STAGING_STORE_PASSWORD') ? System.getenv('ANDROID_STAGING_STORE_PASSWORD').toString() : keystoreProperties['stagingStorePassword']
        }
        release {
            keyAlias System.getenv('ANDROID_KEY_ALIAS') ? System.getenv('ANDROID_KEY_ALIAS').toString() : keystoreProperties['keyAlias']
            keyPassword System.getenv('ANDROID_KEY_PASSWORD') ? System.getenv('ANDROID_KEY_PASSWORD').toString() : keystoreProperties['keyPassword']
            storeFile file('../keystores/release.keystore')
            storePassword System.getenv('ANDROID_STORE_PASSWORD') ? System.getenv('ANDROID_STORE_PASSWORD').toString() : keystoreProperties['storePassword']
        }
    }

    defaultConfig {
        applicationId "com.pillarproject.wallet"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode System.getenv('APP_BUILD_NUMBER') ? System.getenv('APP_BUILD_NUMBER').toInteger() : 1
        versionName System.getenv('buildNumber') ? System.getenv('buildNumber') : '1.0'
        multiDexEnabled true
        missingDimensionStrategy 'react-native-camera', 'general' // react-native-camera
        vectorDrawables.useSupportLibrary = true  // react-native-image-crop-picker
        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", "false"
        buildConfigField "boolean", "IS_HERMES_ENABLED", "false"

    }

    buildTypes {
        debug {
            debuggable true
            signingConfig signingConfigs.debug
        }
        staging {
            buildConfigField "String", "CODEPUSH_KEY", '"com.pillarproject.wallet"'
            applicationIdSuffix ".staging"
            signingConfig signingConfigs.staging
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
            matchingFallbacks = ['release']            
        }
        release {
            buildConfigField "String", "CODEPUSH_KEY", '"com.pillarproject.wallet"'          

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
            signingConfig signingConfigs.release
        }
    }
    namespace 'com.pillarproject.wallet'
    lint {
        abortOnError false
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation "com.facebook.react:react-android"
    implementation "com.facebook.react:hermes-android"

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

   configurations.all {
       exclude group: 'com.crashlytics.sdk.android', module: 'crashlytics'
       exclude group: 'io.fabric.sdk.android', module: 'fabric'
   }

    implementation 'com.facebook.fresco:fresco:3.6.0'
    implementation 'com.facebook.fresco:animated-gif:3.6.0'

    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'  


    // Custom deps
    implementation 'com.android.support.constraint:constraint-layout:2.0.4'
    implementation project(':react-native-notifications')
    implementation 'com.google.firebase:firebase-core:21.1.1' // react-native-notifications
    implementation 'com.google.firebase:firebase-messaging:24.1.2' // react-native-notifications override for Intercom PN handler implementation
    implementation 'com.google.firebase:firebase-iid:21.1.0'
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation "androidx.multidex:multidex:${rootProject.ext.multidex_version}" // custom: support multidex builds
	implementation 'com.google.android.gms:play-services-ads-identifier:18.2.0' // ads identifier
	implementation 'com.android.installreferrer:installreferrer:2.2' // install referrer
	implementation 'com.google.android.gms:play-services-appset:16.1.0' // play services appset
}

