version: 2
jobs:
  build:
    working_directory: ~/pillarwallet
    macos:
      xcode: "9.4.0"
    environment:
      FL_OUTPUT_DIR: output
    shell: /bin/bash --login -o pipefail

    steps:
      - checkout
      - run:
            name: Authenticate with Artifactory
            command: curl -u $ARTIFACTORY_PUBLISHING_USER:$ARTIFACTORY_PUBLISHING_PASSWORD https://pillarproject.jfrog.io/pillarproject/api/npm/auth >> ~/pillarwallet/.npmrc
      - run:
            name: set Registry to use Artifactory
            command: npm config set registry https://pillarproject.jfrog.io/pillarproject/api/npm/npm/
      - run:
          name: Install node dependencies
          command: yarn install
      - run:
          name: Run validation
          command: yarn validate
      - run:
          name: Run unit test and generate coverage stats
          command:  yarn test:coverage
      - store_artifacts:
          path: ./reports/
          destination: reports

  test_ios:
    working_directory: ~/pillarwallet
    macos:
      xcode: "9.4.0"
    environment:
      FL_OUTPUT_DIR: output
    shell: /bin/bash --login -o pipefail

    steps:
      - checkout
      - run:
          name: Append circleCI build number to version
          command: |
            git config user.email "devops@pillar.io"
            git config user.name "Issabot"
            npm version $(node -e "const currentVersion=require('./package.json').version; const firstTwoDots=currentVersion.substring(0, currentVersion.lastIndexOf('.')+1); console.log(firstTwoDots);")$CIRCLE_BUILD_NUM
            export buildNumber=$(node -e "console.log(require('./package.json').version);")
            sed -i.bak s/_build_number_/$buildNumber/g .env
      - restore_cache:
          key: node-{{ checksum "./yarn.lock" }}
      - run:
          name: Install Expo cli
          command: yarn global add exp
      - run:
          name: Setting .expo/PATH
          command: exp path
      - run:
            name: Authenticate with Artifactory
            command: curl -u $ARTIFACTORY_PUBLISHING_USER:$ARTIFACTORY_PUBLISHING_PASSWORD https://pillarproject.jfrog.io/pillarproject/api/npm/auth >> ~/pillarwallet/.npmrc
      - run:
            name: set Registry to use Artifactory
            command: npm config set registry https://pillarproject.jfrog.io/pillarproject/api/npm/npm/
      - run:
            name: set Yarn to use Artifactory
            command: echo 'registry "https://pillarproject.jfrog.io/pillarproject/api/npm/npm/"' >> ~/pillarwallet/.yarnrc
      - run:
          name: Install node dependencies
          command: yarn install
      - save_cache:
          key: node-{{ checksum "./yarn.lock" }}
          paths:
            - ~/nodes_modules
      - restore_cache:
          key: pods-{{ checksum "./ios/Podfile.lock" }}
      - run:
          name: Fetch CocoaPods Specs
          command: |
            curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf
      - run:
          name: Install CocoaPods
          command: cd ios && pod install --verbose
      - save_cache:
          key: pods-{{ checksum "./ios/Podfile.lock" }}
          paths:
            - ./ios/Pods
      - run:
          name: Install Bundler
          command: sudo gem install bundler
      - run:
          name: Creating Gemfile in ios dir
          command: cd ios && bundle init
      - run:
          name: Login to Expo
          command: exp login -u $EXPO_LOGIN -p $EXPO_PASSWORD
      - run:
          name: Publish resources bundle to Expo server
          command: exp publish
      - run:
          name: Install fastlane gem
          command: echo 'gem "fastlane"' >> ./ios/Gemfile
      - restore_cache:
          key: gems-{{ checksum "./ios/Gemfile" }}
      - run:
          name: Create Vendor/bundle for gem dependencies
          command: cd ios && bundle check || bundle install --path vendor/bundle
      - run:
          name: Install fastlane as a dependency
          command: cd ios && sudo bundle update
      - save_cache:
          key: gems-{{ checksum "./ios/Gemfile" }}
          paths:
            - vendor/bundle
      - run:
          name: Execute Fastlane Build for Simulator testing
          command: cd ios && bundle exec fastlane build_ios_simulator
          environment:
            SCAN_DEVICE: iPhone 8
      - store_artifacts:
          path: ./ios/build
          destination: app_build

  deploy_ios:
    working_directory: ~/pillarwallet
    macos:
      xcode: "9.4.0"
    environment:
      FL_OUTPUT_DIR: output
    shell: /bin/bash --login -o pipefail

    steps:
      - checkout
      - run:
          name: Append circleCI build number to version
          command: |
            git config user.email "devops@pillar.io"
            git config user.name "Issabot"
            npm version $(node -e "const currentVersion=require('./package.json').version; const firstTwoDots=currentVersion.substring(0, currentVersion.lastIndexOf('.')+1); console.log(firstTwoDots);")$CIRCLE_BUILD_NUM
            export buildNumber=$(node -e "console.log(require('./package.json').version);")
            sed -i.bak s/_build_number_/$buildNumber/g .env
      - run:
          name: Install Expo cli
          command: yarn global add exp
      - run:
          name: Setting .expo/PATH
          command: exp path
      - restore_cache:
          key: node-{{ checksum "./yarn.lock" }}
      - run:
            name: Authenticate with Artifactory
            command: curl -u $ARTIFACTORY_PUBLISHING_USER:$ARTIFACTORY_PUBLISHING_PASSWORD https://pillarproject.jfrog.io/pillarproject/api/npm/auth >> ~/pillarwallet/.npmrc
      - run:
            name: set Registry to use Artifactory
            command: npm config set registry https://pillarproject.jfrog.io/pillarproject/api/npm/npm/
      - run:
          name: Install node dependencies
          command: yarn install
      - save_cache:
          key: node-{{ checksum "./yarn.lock" }}
          paths:
            - ~/nodes_modules
      - restore_cache:
          key: pods-{{ checksum "./ios/Podfile.lock" }}
      - run:
          name: Fetch CocoaPods Specs
          command: |
            curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf
      - run:
          name: Install CocoaPods
          command: cd ios && pod install --verbose
      - save_cache:
          key: pods-{{ checksum "./ios/Podfile.lock" }}
          paths:
            - ./ios/Pods
      - run:
          name: Install Bundler
          command: sudo gem install bundler
      - run:
          name: Creating Gemfile in ios dir
          command: cd ios && bundle init
      - run:
          name: Login to Expo
          command: exp login -u $EXPO_LOGIN -p $EXPO_PASSWORD
      - run:
          name: Publish resources bundle to Expo server
          command: exp publish
      - run:
          name: Install fastlane gem
          command: echo 'gem "fastlane"' >> ./ios/Gemfile
      - restore_cache:
          key: gems-{{ checksum "./ios/Gemfile" }}
      - run:
          name: Create Vendor/bundle for gem dependencies
          command: cd ios && bundle check || bundle install --path vendor/bundle
      - run:
          name: Install fastlane as a dependency
          command: cd ios && sudo bundle update
      - save_cache:
          key: gems-{{ checksum "./ios/Gemfile" }}
          paths:
            - vendor/bundle
      - run:
          name: Execute Fastlane deployment to TestFlight
          command: cd ios && bundle exec fastlane build_test_flight
          environment:
            SCAN_DEVICE: iPhone 8
      - run:
          name: Announce Deployment
          command: |
            chmod +x .circleci/announceDeployment.sh
            .circleci/announceDeployment.sh "Pillar Wallet" "TestFlight"

  deploy_android:
    working_directory: ~/pillarwallet/android
    docker:
      - image: circleci/android:api-26-node8-alpha
    environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx2048m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m -Dfile.encoding=UTF-8"'
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
    steps:
      - checkout:
          path: ~/pillarwallet
      - run:
          name: Append circleCI build number to version
          command: |
            cd ~/pillarwallet
            git config user.email "devops@pillar.io"
            git config user.name "Issabot"
            npm version $(node -e "const currentVersion=require('./package.json').version; const firstTwoDots=currentVersion.substring(0, currentVersion.lastIndexOf('.')+1); console.log(firstTwoDots);")$CIRCLE_BUILD_NUM
            export buildNumber=$(node -e "console.log(require('./package.json').version);")
            cat .env
            echo "$buildNumber"
            sed -i 's/_build_number_/$buildNumber/g' .env
            echo "$buildNumber" >> ~/pillarwallet/buildNumber.txt
            cat .env
      - restore_cache:
          key: node-{{ checksum "../yarn.lock" }}
      - run:
          name: Install Expo cli
          command: cd .. && sudo yarn global add exp
      - run:
          name: Setting .expo/PATH
          command: cd .. && exp path
      - run:
            name: Authenticate with Artifactory
            command: cd .. && curl -u $ARTIFACTORY_PUBLISHING_USER:$ARTIFACTORY_PUBLISHING_PASSWORD https://pillarproject.jfrog.io/pillarproject/api/npm/auth >> ~/pillarwallet/.npmrc
      - run:
            name: set Registry to use Artifactory
            command: cd .. && npm config set registry https://pillarproject.jfrog.io/pillarproject/api/npm/npm/
      - run:
            name: set Yarn to use Artifactory
            command: cd .. && echo 'registry "https://pillarproject.jfrog.io/pillarproject/api/npm/npm/"' >> ~/pillarwallet/.yarnrc
      - run:
          name: Install node dependencies
          command: cd .. && yarn install
      - run:
          name: Login to Expo
          command: cd .. && exp login -u $EXPO_LOGIN -p $EXPO_PASSWORD
      - run:
          name: Publish resources bundle to Expo server
          command: cd .. && exp publish
      - save_cache:
          key: node-{{ checksum "../yarn.lock" }}
          paths:
            - ~/pillarwallet/nodes_modules
      - run:
          name: Creating Gemfile in android dir
          command: bundle init
      - run:
          name: Install fastlane gem
          command: echo 'gem "fastlane"' >> Gemfile
      - restore_cache:
          key: gems-{{ checksum "Gemfile" }}
      - run:
          name: Bundle install
          command: bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: gems-{{ checksum "Gemfile" }}
          paths:
            - vendor/bundle
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
      - run:
          name: Chmod permissions
          command: sudo chmod +x ./gradlew
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies --no-daemon --stacktrace --max-workers=2
      - save_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
          paths:
            - ~/.gradle
            - ~/.m2
      # - run:
      #     name: Run Tests
      #     command: ./gradlew lint test
      # - store_artifacts:
      #     path: app/build/reports
      #     destination: reports
      # - store_test_results:
      #     path: app/build/test-results
      - run:
          name: Initial build
          command: |
            export buildNumber=$(cat ~/pillarwallet/buildNumber.txt)
            ./gradlew clean assembleProdRelease --no-daemon --stacktrace --max-workers=2 -PBUILD_NUMBER=$CIRCLE_BUILD_NUM

      - run:
          name: Fastlane deploy to Google Play
          command: |
            export buildNumber=$(cat ~/pillarwallet/buildNumber.txt)
            export GOOGLE_JSON_DATA=$(echo "$GOOGLE_JSON_BASE64_ENCODED" | base64 --decode)
            bundle exec fastlane supply init --json_key_data="$GOOGLE_JSON_DATA"
            bundle exec fastlane deploy_internal --verbose
          environment:
            BUNDLE_PATH: vendor/bundle
      - store_artifacts:
          path: app/build/outputs/apk
          destination: apks
      - run:
          name: Announce Deployment
          command: |
            cd ~/pillarwallet
            chmod +x .circleci/announceDeployment.sh
            .circleci/announceDeployment.sh "Pillar Wallet" "Google Play Store"

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy_ios:
          requires:
            - build
          filters:
            branches:
              only:
                  - master
      - deploy_android:
          requires:
            - build
          filters:
            branches:
              only:
                  - master
