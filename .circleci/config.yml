version: 2.1

orbs:
  slack: circleci/slack@2.3.0
  aws-cli: circleci/aws-cli@0.1.17

executors:
  ios-executor:
    working_directory: ~/pillarwallet
    macos:
      xcode: "10.2.0"
    environment:
      NODE_OPTIONS: "--max-old-space-size=4096"
      FL_OUTPUT_DIR: output
      _JAVA_OPTIONS: "-Xms128m -Xmx3024m"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx1248m -XX:+HeapDumpOnOutOfMemoryError"'
    resource_class: medium
    shell: /bin/bash --login -o pipefail

  android-executor:
    working_directory: ~/pillarwallet
    resource_class: large
    docker:
      - image: circleci/android:api-29-node
    environment:
      NODE_OPTIONS: "--max-old-space-size=4096"
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx4096m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx4096m -Dfile.encoding=UTF-8"'
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8

  node8-executor:
    working_directory: ~/pillarwallet
    docker:
      - image: circleci/openjdk:8-node-browsers

  node10-executor:
    working_directory: ~/pillarwallet
    docker:
      - image: circleci/node:10.14
    environment:
      NODE_OPTIONS: "--max-old-space-size=4096"
    resource_class: large
    shell: /bin/bash --login -o pipefail

aliases:
  - &restore_pod_cache
    restore_cache:
      keys:
        - ios-pods-{{ checksum "./ios/Podfile.lock" }}
  - &fetch_pods
    run:
      name: Fetch CocoaPods
      command: |
        Y | sudo gem uninstall cocoapods
        sudo gem install cocoapods -v 1.5.3
        curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf
  - &install_pods
    run:
      name: Install CocoaPods
      command: |
        cd ios
        pod install --verbose
  - &save_pod_cache
    save_cache:
      key: ios-pods-{{ checksum "./ios/Podfile.lock" }}
      paths:
        - ./ios/Pods
  - &restore_gems_cache_ios
    restore_cache:
      name: Restore cache
      keys:
        - ios-gems-{{ checksum "./ios/Gemfile" }}
  - &restore_gems_cache_android
    restore_cache:
      name: Restore cache
      keys:
        - android-gems-{{ checksum "./android/Gemfile" }}
  - &install_gems_ios
    run:
      name: Bundle install
      command: cd ios && bundle check || bundle install --path vendor/bundle
      environment:
        BUNDLE_JOBS: 4
        BUNDLE_RETRY: 3
  - &install_gems_android
    run:
      name: Bundle install
      command: cd android && bundle check || bundle install --path vendor/bundle
      environment:
        BUNDLE_JOBS: 4
        BUNDLE_RETRY: 3
  - &save_gems_cache_ios
    save_cache:
      key: ios-gems-{{ checksum "./ios/Gemfile" }}
      paths:
        - vendor/bundle
  - &save_gems_cache_android
    save_cache:
      key: android-gems-{{ checksum "./android/Gemfile" }}
      paths:
        - vendor/bundle
  - &node_restore_cache
    restore_cache:
      key: node-{{ checksum "./yarn.lock" }}
  - &node_artifactory_authenticate
    run:
      name: Authenticate with Artifactory
      command: curl -u $ARTIFACTORY_PUBLISHING_USER:$ARTIFACTORY_PUBLISHING_PASSWORD https://pillarproject.jfrog.io/pillarproject/api/npm/auth >> ~/pillarwallet/.npmrc
  - &node_artifactory_set_registry
    run:
      name: set Registry to use Artifactory
      command: npm config set registry https://pillarproject.jfrog.io/pillarproject/api/npm/npm/
  - &android_latest_npm
     run:
      name: Install latest npm version
      command: sudo npm install -g npm@latest
  - &ios_latest_npm
     run:
      name: Install latest npm version
      command: npm install -g npm@latest
  - &ios_latest_yarn
     run:
      name: Install latest yarn version
      command: npm install -g yarn
  - &android_latest_yarn
     run:
      name: Install latest yarn version
      command: sudo npm install -g yarn
  - &yarn_install
     run:
      name: Install node dependencies
      command: yarn install
  - &node_save_cache
    save_cache:
      key: node-{{ checksum "./yarn.lock" }}
      paths:
        - ~/nodes_modules

  - &gradle_restore_cache
    restore_cache:
      key: android-jars-v1-{{ checksum "./android/build.gradle" }}-{{ checksum  "./android/app/build.gradle" }}
  - &gradle_depencencies
    run:
      name: Download Dependencies
      command: cd android && ./gradlew androidDependencies --no-daemon --stacktrace --max-workers=2
  - &gradle_save_cache
    save_cache:
      key: android-jars-v1-{{ checksum "./android/build.gradle" }}-{{ checksum  "./android/app/build.gradle" }}
      paths:
        - ~/android/.gradle
        - ~/android/.m2
  - &set_staging_env
      run:
        name: Set staging environment
        command: |
          cd ~/pillarwallet
          git config user.email "devops@pillar.io"
          git config user.name "Issabot"
          npm --no-git-tag-version version $(node -e "const currentVersion=require('./package.json').version; const firstTwoDots=currentVersion.substring(0, currentVersion.lastIndexOf('.')+1); console.log(firstTwoDots);")$CIRCLE_BUILD_NUM
          export buildNumber=$(node -e "console.log(require('./package.json').version);")
          rm .env
          cp environments/.env.staging ./.env
          sed -i.bak "s/_build_number_/$buildNumber/g" .env
          sed -i.bak "s/_open_sea_api_key_/$OPEN_SEA_API_KEY/g" .env
          sed -i.bak "s/_infura_project_id_/$INFURA_PROJECT_ID/g" .env
          sed -i.bak "s/_sentry_auth_token_/$SENTRY_AUTH_TOKEN/g" .env
          sed -i.bak "s/_ethplorer_api_key_/$ETHPLORER_API_KEY/g" .env
          sed -i.bak "s/_widget_signature_/$WIDGET_SIGNATURE/g" .env
          echo "$buildNumber" >> ~/pillarwallet/buildNumber.txt

jobs:
  build-and-test:
    executor: node10-executor
    steps:
      - checkout
      - run:
          name: Save build number
          command: |
            APP_BUILD_NUMBER=${CIRCLE_BUILD_NUM}
            mkdir -p /tmp/workspace/build-num
            cd /tmp/workspace/build-num
            echo ${APP_BUILD_NUMBER} > app_build_number.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - build-num
      - *node_restore_cache
      - *node_artifactory_authenticate
      - *node_artifactory_set_registry
#      - *ios_latest_yarn
      - *android_latest_npm
      - *yarn_install
      - *node_save_cache
      - run:
          name: Run validation
          command: yarn validate

  hockeyapp_ios:
    executor: ios-executor
    steps:
      - checkout
      - attach_workspace: &attach_workspace
          at: /tmp/workspace

      - *node_restore_cache
      - *node_artifactory_authenticate
      - *node_artifactory_set_registry
#      - *ios_latest_yarn
      - *ios_latest_npm
      - *yarn_install
      - *node_save_cache

      - *restore_gems_cache_ios
      - *install_gems_ios
      - *save_gems_cache_ios

      - *restore_pod_cache
      - *fetch_pods
      - *install_pods
      - *save_pod_cache

      - run:
          name: Set staging environment
          command: |
            cd ~/pillarwallet
            git config user.email "devops@pillar.io"
            git config user.name "Issabot"
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            npm --no-git-tag-version version $(node -e "const currentVersion=require('./package.json').version; const firstTwoDots=currentVersion.substring(0, currentVersion.lastIndexOf('.')+1); console.log(firstTwoDots);")$APP_BUILD_NUMBER
            export buildNumber=$(node -e "console.log(require('./package.json').version);")
            rm .env
            cp environments/.env.staging ./.env
            sed -i.bak "s/_build_number_/$buildNumber/g" .env
            sed -i.bak "s/_open_sea_api_key_/$OPEN_SEA_API_KEY/g" .env
            sed -i.bak "s/_infura_project_id_/$INFURA_PROJECT_ID/g" .env
            sed -i.bak "s/_sentry_auth_token_/$SENTRY_AUTH_TOKEN/g" .env
            sed -i.bak "s/_ethplorer_api_key_/$ETHPLORER_API_KEY/g" .env
            sed -i.bak "s/_widget_signature_/$WIDGET_SIGNATURE/g" .env
            echo "$buildNumber" >> ~/pillarwallet/buildNumber.txt
      - run:
          no_output_timeout: 20m
          name: Upload to Hockeyapp
          command: |
            export buildNumber=$(cat ~/pillarwallet/buildNumber.txt)
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            cd ios && bundle exec fastlane deploy_ios_hockeyapp APP_BUILD_NUMBER:$APP_BUILD_NUMBER build_number:$buildNumber APP_NAME:"Pillar Staging"
      - run:
          name: prepare to archive ipa file
          command: |
            mkdir -p ./toArchive
            cp ./ios/output/gym/pillarwallet-staging.ipa ./toArchive
      - store_artifacts:
          path: ./toArchive
          destination: app_build

  hockeyapp_android:
    executor: android-executor
    steps:
      - checkout
      - attach_workspace: &attach_workspace
          at: /tmp/workspace
      - *node_restore_cache
      - *node_artifactory_authenticate
      - *node_artifactory_set_registry
#      - *android_latest_yarn
      - *android_latest_npm
      - *yarn_install
      - *node_save_cache

      - *restore_gems_cache_android
      - *install_gems_android
      - *save_gems_cache_android

      - *gradle_restore_cache

      - aws-cli/install
      - aws-cli/setup:
           aws-access-key-id: NONPROD_APP_STORE_ACCESS_KEY
           aws-secret-access-key: NONPROD_APP_STORE_SECRET_KEY_ID
           aws-region: AWS_DEFAULT_REGION
      - run:
          name: Get keystore file
          command: |
            cd /home/circleci/pillarwallet/android/
            aws s3 cp s3://pillar-app-keystore-eu-west-2-861741397496/staging-key.keystore .
      - run:
          name: Accept Android SDK licenses
          command: |
            yes | sdkmanager --licenses || exit 0
      - run:
          name: Accept Android SDK licenses 2
          command: |
            yes | sdkmanager --update || exit 0

      - *gradle_depencencies
      - *gradle_save_cache

      - run:
          name: Set staging environment
          command: |
            cd ~/pillarwallet
            git config user.email "devops@pillar.io"
            git config user.name "Issabot"
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            npm --no-git-tag-version version $(node -e "const currentVersion=require('./package.json').version; const firstTwoDots=currentVersion.substring(0, currentVersion.lastIndexOf('.')+1); console.log(firstTwoDots);")$APP_BUILD_NUMBER
            export buildNumber=$(node -e "console.log(require('./package.json').version);")
            rm .env
            cp environments/.env.staging ./.env
            sed -i.bak "s/_build_number_/$buildNumber/g" .env
            sed -i.bak "s/_open_sea_api_key_/$OPEN_SEA_API_KEY/g" .env
            sed -i.bak "s/_infura_project_id_/$INFURA_PROJECT_ID/g" .env
            sed -i.bak "s/_sentry_auth_token_/$SENTRY_AUTH_TOKEN/g" .env
            sed -i.bak "s/_ethplorer_api_key_/$ETHPLORER_API_KEY/g" .env
            sed -i.bak "s/_widget_signature_/$WIDGET_SIGNATURE/g" .env
            echo "$buildNumber" >> ~/pillarwallet/buildNumber.txt
      - run:
          name: Initial build
          command: |
            export buildNumber=$(cat ~/pillarwallet/buildNumber.txt)
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            cd android && ./gradlew clean assembleProdStaging --no-daemon --stacktrace --max-workers=2 -PBUILD_NUMBER=$APP_BUILD_NUMBER
      - run:
          name: Upload to Hockeyapp
          command: |
            export buildNumber=$(cat ~/pillarwallet/buildNumber.txt)
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            export ENVFILE=$(echo ~/pillarwallet/.env)
            cd android && bundle exec fastlane deploy_android_hockeyapp
      - store_artifacts:
          path: android/app/build/outputs/apk
          destination: apks

  slack-prod-approval:
    executor: node8-executor
    steps:
      - slack/approval:
          mentions: "here"
          color: '#f28c10'
          message: Staging builds finished successfully, prod approval step is pending.
          webhook: $APPROVAL_SLACK_WEBHOOK
          url: 'https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_WORKSPACE_ID'

  prod_ios:
    executor: ios-executor
    steps:
      - checkout
      - attach_workspace: &attach_workspace
          at: /tmp/workspace
      - aws-cli/install
      - aws-cli/setup:
           aws-access-key-id: PRODUCTION_AWS_ACCESS_KEY_ID
           aws-secret-access-key: PRODUCTION_AWS_SECRET_ACCESS_KEY
           aws-region: AWS_DEFAULT_REGION
      - run:
          name: Install npm latest
          command: npm install -g npm@latest
      - run:
          name: Append circleCI build number to version
          command: |
            git config user.email "devops@pillar.io"
            git config user.name "Issabot"
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            npm version $(node -e "const currentVersion=require('./package.json').version; const firstTwoDots=currentVersion.substring(0, currentVersion.lastIndexOf('.')+1); console.log(firstTwoDots);")$APP_BUILD_NUMBER
            export buildNumber=$(node -e "console.log(require('./package.json').version);")
            rm .env
            cp environments/.env.production ./.env
            sed -i.bak "s/_build_number_/$buildNumber/g" .env
            sed -i.bak "s/_open_sea_api_key_/$OPEN_SEA_API_KEY/g" .env
            sed -i.bak "s/_infura_project_id_/$INFURA_PROJECT_ID/g" .env
            sed -i.bak "s/_sentry_auth_token_/$SENTRY_AUTH_TOKEN/g" .env
            sed -i.bak "s/_ethplorer_api_key_/$ETHPLORER_API_KEY/g" .env
            sed -i.bak "s/_widget_signature_/$WIDGET_SIGNATURE/g" .env
            echo "$buildNumber" >> ~/pillarwallet/buildNumber.txt
      - restore_cache:
          key: ios-node-{{ checksum "./yarn.lock" }}
      - run:
            name: Authenticate with Artifactory
            command: curl -u $ARTIFACTORY_PUBLISHING_USER:$ARTIFACTORY_PUBLISHING_PASSWORD https://pillarproject.jfrog.io/pillarproject/api/npm/auth >> ~/pillarwallet/.npmrc
      - run:
            name: set Registry to use Artifactory
            command: npm config set registry https://pillarproject.jfrog.io/pillarproject/api/npm/npm/
      - run:
          name: Install node dependencies
          command: yarn install
      - save_cache:
          key: ios-node-{{ checksum "./yarn.lock" }}
          paths:
            - ~/nodes_modules
      - restore_cache:
          key: ios-pods-{{ checksum "./ios/Podfile.lock" }}
      - run:
          name: Fetch CocoaPods Specs
          command: |
            Y | sudo gem uninstall cocoapods
            sudo gem install cocoapods -v 1.5.3
            curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf
      - run:
          name: Install CocoaPods
          command: |
            cd ios
            pod install --verbose
      - save_cache:
          key: ios-pods-{{ checksum "./ios/Podfile.lock" }}
          paths:
            - ./ios/Pods
      - run:
          name: Install Bundler
          command: sudo gem install bundler -v 2.0.2
      - restore_cache:
          key: ios-gems-{{ checksum "./ios/Gemfile" }}
      - run:
          name: Create Vendor/bundle for gem dependencies
          command: cd ios && bundle check || bundle install --path vendor/bundle
      - run:
          name: Install fastlane as a dependency
          command: cd ios && sudo bundle update
      - save_cache:
          key: ios-gems-{{ checksum "./ios/Gemfile" }}
          paths:
            - vendor/bundle
      - run:
          no_output_timeout: 20m
          name: Upload to TestFlight
          command: |
            export buildNumber=$(cat ~/pillarwallet/buildNumber.txt)
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            cd ios && bundle exec fastlane deploy_prod APP_BUILD_NUMBER:$APP_BUILD_NUMBER build_number:$buildNumber APP_NAME:"Pillar Wallet"
      - run:
          name: Copy production iOS artifact to S3
          command: |
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            cd ./ios/output/gym/
            touch ios-s3-URL-prod.txt
            aws s3 cp pillarwallet.ipa $PILLAR_PROD_ARTIFACTS_BUCKET/pillarwallet-ios-prod-$APP_BUILD_NUMBER.ipa --region eu-west-2
            aws s3 presign $PILLAR_PROD_ARTIFACTS_BUCKET/pillarwallet-ios-prod-$APP_BUILD_NUMBER.ipa --expires-in 604800 --region eu-west-2 > ios-s3-URL-prod.txt
      - run:
           name: Announce Prod Builds
           command: |
             chmod +x .circleci/announceProdBuilds.sh
             .circleci/announceProdBuilds.sh "Pillar Wallet" "*Prod* iOS internal track - Тests pending" "$(cat /tmp/workspace/build-num/app_build_number.txt)"
      - run:
           name: Announce Deployment
           command: |
             chmod +x .circleci/announceDeployment.sh
             .circleci/announceDeployment.sh "Pillar Wallet" "*Prod* iOS internal track - Тests pending" "$(cat /tmp/workspace/build-num/app_build_number.txt)"
      - run:
          name: Announce production iOS URL
          command: |
            cd ~/pillarwallet
            chmod +x .circleci/announceURLs.sh
            .circleci/announceURLs.sh "pillarwallet" "production" "ios" "$(cat ~/pillarwallet/ios/output/gym/ios-s3-URL-prod.txt)" "$(cat /tmp/workspace/build-num/app_build_number.txt)"
      - run:
          name: prepare to archive ipa file
          command: |
            mkdir -p ./toArchive
            cp ./ios/output/gym/pillarwallet.ipa ./toArchive
      - store_artifacts:
          path: ./toArchive
          destination: app_build

  prod_android:
    executor: android-executor
    steps:
      - checkout:
          path: ~/pillarwallet
      - attach_workspace: &attach_workspace
          at: /tmp/workspace
      - aws-cli/install
      - aws-cli/setup:
           aws-access-key-id: PRODUCTION_AWS_ACCESS_KEY_ID
           aws-secret-access-key: PRODUCTION_AWS_SECRET_ACCESS_KEY
           aws-region: AWS_DEFAULT_REGION
      - run:
          name: Install npm latest
          command: sudo npm install -g npm@latest
      - run:
          name: Get keystore file
          command: |
            cd /home/circleci/pillarwallet/android/
            aws s3 cp s3://pillar-prod-app-keystore-eu-west-2-304069782345/release.keystore .
      - run:
          name: Append circleCI build number to version
          command: |
            cd ~/pillarwallet
            git config user.email "devops@pillar.io"
            git config user.name "Issabot"
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            npm version $(node -e "const currentVersion=require('./package.json').version; const firstTwoDots=currentVersion.substring(0, currentVersion.lastIndexOf('.')+1); console.log(firstTwoDots);")$APP_BUILD_NUMBER
            export buildNumber=$(node -e "console.log(require('./package.json').version);")
            rm .env
            cp environments/.env.production ./.env
            sed -i.bak "s/_build_number_/$buildNumber/g" .env
            sed -i.bak "s/_open_sea_api_key_/$OPEN_SEA_API_KEY/g" .env
            sed -i.bak "s/_infura_project_id_/$INFURA_PROJECT_ID/g" .env
            sed -i.bak "s/_sentry_auth_token_/$SENTRY_AUTH_TOKEN/g" .env
            sed -i.bak "s/_ethplorer_api_key_/$ETHPLORER_API_KEY/g" .env
            sed -i.bak "s/_widget_signature_/$WIDGET_SIGNATURE/g" .env
            echo "$buildNumber" >> ~/pillarwallet/buildNumber.txt
      - restore_cache:
          key: android-node-{{ checksum "./yarn.lock" }}
      - run:
            name: Authenticate with Artifactory
            command: curl -u $ARTIFACTORY_PUBLISHING_USER:$ARTIFACTORY_PUBLISHING_PASSWORD https://pillarproject.jfrog.io/pillarproject/api/npm/auth >> ~/pillarwallet/.npmrc
      - run:
            name: set Registry to use Artifactory
            command: npm config set registry https://pillarproject.jfrog.io/pillarproject/api/npm/npm/
      - run:
            name: set Yarn to use Artifactory
            command: echo 'registry "https://pillarproject.jfrog.io/pillarproject/api/npm/npm/"' >> ~/pillarwallet/.yarnrc
      - run:
          name: Install node dependencies
          command: yarn install
      - save_cache:
          key: android-node-{{ checksum "./yarn.lock" }}
          paths:
            - ~/pillarwallet/nodes_modules
      - restore_cache:
          key: android-gems-{{ checksum "Gemfile" }}
      - run:
          name: Bundle install
          command: |
            cd android
            bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: android-gems-{{ checksum "Gemfile" }}
          paths:
            - vendor/bundle
      - restore_cache:
          key: android-jars-{{ checksum "./android/build.gradle" }}-{{ checksum "./android/app/build.gradle" }}
      - run:
          name: Chmod permissions
          command: cd android && sudo chmod +x ./gradlew
      - run:
          name: Accept Android SDK licenses
          command: |
            cd android
            yes | sdkmanager --licenses || exit 0
      - run:
          name: Accept Android SDK licenses 2
          command: |
            cd android
            yes | sdkmanager --update || exit 0
      - run:
          name: Download Dependencies
          command: cd android && ./gradlew androidDependencies --no-daemon --stacktrace --max-workers=2
      - save_cache:
          key: android-jars-{{ checksum "./android/build.gradle" }}-{{ checksum "./android/app/build.gradle" }}
          paths:
            - ~/.gradle
            - ~/.m2
      - run:
          name: Initial build
          command: |
            cd android
            export buildNumber=$(cat ~/pillarwallet/buildNumber.txt)
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            ./gradlew clean assembleProdRelease --no-daemon --stacktrace --max-workers=2 -PBUILD_NUMBER=$APP_BUILD_NUMBER
      - run:
          name: Fastlane deploy to Google Play
          command: |
            cd android
            export buildNumber=$(cat ~/pillarwallet/buildNumber.txt)
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            export GOOGLE_JSON_DATA=$(echo "$GOOGLE_JSON_BASE64_ENCODED" | base64 --decode)
            bundle exec fastlane deploy_internal --verbose
          environment:
            BUNDLE_PATH: vendor/bundle
      - store_artifacts:
          path: app/build/outputs/apk/prod/release
          destination: apks
      - run:
          name: Copy prod android artifact to S3
          command: |
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            cd /home/circleci/pillarwallet/android/app/build/outputs/apk/prod/release/
            touch android-s3-URL-prod.txt
            aws s3 cp app-prod-release.apk $PILLAR_PROD_ARTIFACTS_BUCKET/pillarwallet-android-prod-$APP_BUILD_NUMBER.apk --region eu-west-2
            aws s3 presign $PILLAR_PROD_ARTIFACTS_BUCKET/pillarwallet-android-prod-$APP_BUILD_NUMBER.apk --expires-in 604800 --region eu-west-2 > android-s3-URL-prod.txt
      - run:
          name: Announce Prod Builds
          command: |
            cd ~/pillarwallet
            chmod +x .circleci/announceProdBuilds.sh
            .circleci/announceProdBuilds.sh "Pillar Wallet" "*Prod* Android internal track - Тests pending" "$(cat /tmp/workspace/build-num/app_build_number.txt)"
      - run:
           name: Announce Deployment
           command: |
             chmod +x .circleci/announceDeployment.sh
             .circleci/announceDeployment.sh "Pillar Wallet" "*Prod* Android internal track - Tests pending" "$(cat /tmp/workspace/build-num/app_build_number.txt)"
      - run:
          name: Announce Prod Android URL
          command: |
            cd ~/pillarwallet
            chmod +x .circleci/announceURLs.sh
            .circleci/announceURLs.sh "pillarwallet" "production" "android" "$(cat /home/circleci/pillarwallet/android/app/build/outputs/apk/prod/release/android-s3-URL-prod.txt)" "$(cat /tmp/workspace/build-num/app_build_number.txt)"

workflows:
  version: 2.1
  build_and_deploy:
    jobs:
      - build-and-test
      - hockeyapp_ios:
          requires:
            - build-and-test
          filters:
            branches:
              only:
                  - develop
      - hockeyapp_android:
          requires:
            - build-and-test
          filters:
            branches:
              only:
                  - develop
      - slack-prod-approval:
          requires:
            - build-and-test
          filters:
            branches:
              only:
                  - master
      - release_to_prod:
          type: approval
          requires:
            - build-and-test
          filters:
            branches:
              only:
                  - master
      - prod_ios:
          requires:
            - release_to_prod
      - prod_android:
          requires:
            - release_to_prod
