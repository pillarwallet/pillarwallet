fastlane_require "indentation"
default_platform(:ios)

platform :ios do

  before_all do
    setup_circle_ci
  end

  desc "Release to production TestFlight"
  lane :deploy_prod do |options|
    sh "/usr/libexec/PlistBuddy -c 'Set :CFBundleVersion #{options[:APP_BUILD_NUMBER]}' ~/pillarwallet/ios/pillarwallet/Info.plist"
    sh "/usr/libexec/PlistBuddy -c 'Set :CFBundleShortVersionString #{options[:build_number]}' ~/pillarwallet/ios/pillarwallet/Info.plist"
    sh "/usr/libexec/PlistBuddy -c 'Set :CFBundleDisplayName #{options[:APP_NAME]}' ~/pillarwallet/ios/pillarwallet/Info.plist"

    MY_APP_ID = "com.pillarproject.wallet"
    MY_PROFILE = "match AppStore com.pillarproject.wallet"

    app_store_connect_api_key(
      key_id: ENV["APPLE_API_KEY_ID"],
      issuer_id: ENV["APPLE_API_KEY_ISSUER_ID"],
      key_filepath: "./AuthKey.p8",
      in_house: false,
    )

    match(type: "appstore",
          readonly: true,
          git_branch: "master",
          app_identifier: "com.pillarproject.wallet",
          team_id: "J9DEY3FGPD"
        )

    gym(
      workspace: "pillarwallet.xcworkspace",
      configuration: "Release",
      scheme: "pillarwallet",
      xcargs: "BUNDLE_IDENTIFIER='com.pillarproject.wallet' PROVISIONING_PROFILE_SPECIFIER='match AppStore com.pillarproject.wallet' DEVELOPMENT_TEAM='J9DEY3FGPD'",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
            MY_APP_ID => MY_PROFILE
        }
      },
      clean: true,
      derived_data_path: "build",
    )

    # xcargs arguments, especially PROVISIONING_PROFILE_SPECIFIER need to be checked when the current Distribution cert. & prov. profile expire. Steps that should be done:
    # 1. Delete the expired prov. profile.
    # 2. Run match with readonly set to false in order for match to create a new Distribution certificate and a new provisioning profile.
    # When the new one is created, using match, it should be created with the same name, so we should expect no changes/problems to occure in the gym stage.

    commit = last_git_commit
    upload_to_testflight(
      changelog: commit[:message],
      skip_waiting_for_build_processing: true,
    )

  end

  desc "Release to adhoc TestFlight"
  lane :deploy_ios_appcenter do |options|

    MY_APP_ID = "com.pillarproject.wallet.staging"
    MY_PROFILE = "match AdHoc com.pillarproject.wallet.staging"

    # insert circleCI's build number as our build number
    sh "/usr/libexec/PlistBuddy -c 'Set :CFBundleVersion #{options[:APP_BUILD_NUMBER]}' ~/pillarwallet/ios/pillarwallet/Info.plist"
    sh "/usr/libexec/PlistBuddy -c 'Set :CFBundleShortVersionString #{options[:build_number]}' ~/pillarwallet/ios/pillarwallet/Info.plist"
    sh "/usr/libexec/PlistBuddy -c 'Set :CFBundleDisplayName #{options[:APP_NAME]}' ~/pillarwallet/ios/pillarwallet/Info.plist"

    # ensure we don't have automatic code signing set up
    #disable_automatic_code_signing(path: "pillarwallet.xcodeproj")

    app_store_connect_api_key(
      key_id: ENV["APPLE_API_KEY_ID"],
      issuer_id: ENV["APPLE_API_KEY_ISSUER_ID"],
      key_filepath: "./AuthKey.p8",
      in_house: false,
    )

    #register_devices(devices_file: "./devices.txt")
    register_devices(
      devices_file: "./devices.txt"
    )

    # get our adhoc provisioning profile
    match(type: "adhoc",
          readonly: false,
          git_branch: "develop",
          app_identifier: "com.pillarproject.wallet.staging",
          team_id: "J9DEY3FGPD",
          force_for_new_devices: false
          )

    gym(
      workspace: "pillarwallet.xcworkspace",
      configuration: "Staging.Release",
      scheme: "Staging",
      xcargs: "BUNDLE_IDENTIFIER='com.pillarproject.wallet.staging' PROVISIONING_PROFILE_SPECIFIER='match AdHoc com.pillarproject.wallet.staging' DEVELOPMENT_TEAM='J9DEY3FGPD'",
      export_method: "ad-hoc",
      export_options: {
        provisioningProfiles: {
            MY_APP_ID => MY_PROFILE
        }
      },
      clean: true,
      derived_data_path: "build"
    )

    # Gym command xcargs will have to be reviewed and changed at the point when the current Distribution cert. and prov. profile expire.
    # Especially the PROVISIONING_PROFILE_SPECIFIER set in there since it is hardcoded to a prov. profile that is specific, we need to change it to a standard match AdHoc com.pillarproject.wallet.staging
    # withouth the numbers created at the end, which have been added by match command back when the profile was created.

    #sh "fastlane sigh resign ../pillarwallet-staging.ipa --signing_identity 'iPhone Distribution: PILLAR PROJECT WORLDWIDE LIMITED (J9DEY3FGPD)' --provisioning_profile '" + ENV["sigh_com.pillarproject.wallet.staging_adhoc_profile-path"] + "'"
    changelog = build_custom_changelog
    commit = last_git_commit

    appcenter_upload(
      api_token: ENV["APPCENTER_IOS_TOKEN"],
      owner_name: "brent-2",
      owner_type: "user",
      app_name: "Pillar-Wallet-Staging",
      file: "./output/gym/pillarwallet-staging.ipa",
      notify_testers: true,
      release_notes: changelog
    )

  end

  desc "Release to staging TestFlight"
  lane :deploy_staging do |options|

    # insert circleCI's build number as our build number
    sh "/usr/libexec/PlistBuddy -c 'Set :CFBundleVersion #{options[:APP_BUILD_NUMBER]}' ~/pillarwallet/ios/pillarwallet/Info.plist"
    sh "/usr/libexec/PlistBuddy -c 'Set :CFBundleShortVersionString #{options[:build_number]}' ~/pillarwallet/ios/pillarwallet/Info.plist"
    sh "/usr/libexec/PlistBuddy -c 'Set :CFBundleDisplayName #{options[:APP_NAME]}' ~/pillarwallet/ios/pillarwallet/Info.plist"

    # ensure we don't have automatic code signing set up
    #disable_automatic_code_signing(path: "pillarwallet.xcodeproj")

    MY_APP_ID = "com.pillarproject.wallet.staging"
    MY_PROFILE = "match AppStore com.pillarproject.wallet.staging"

    # get our provisioning profile
    match(type: "appstore",
      readonly: true,
      git_branch: "develop",
      app_identifier: "com.pillarproject.wallet.staging",
      team_id: "J9DEY3FGPD",
    )

    # get our push-notification cert
    pem(
      force: false,
      app_identifier: "com.pillarproject.wallet.staging",
      team_id: "J9DEY3FGPD",
    )

    gym(
      workspace: "pillarwallet.xcworkspace",
      configuration: "Staging.Release",
      scheme: "Staging",
      xcargs: "xBUNDLE_IDENTIFIER='com.pillarproject.wallet.staging' PROVISIONING_PROFILE_SPECIFIER='match AppStore com.pillarproject.wallet.staging' DEVELOPMENT_TEAM='J9DEY3FGPD'",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
            MY_APP_ID => MY_PROFILE
        }
      },
      clean: true,
      derived_data_path: "build"
    )

    # questions remaining:
    # 1. do we need to download certs, then build, then download more certs and re-sign? sounds like at least one step doesnt' need doing
    # 2. given that we have the process working now, should we try to shuffle the sh "xcodebuild" blocks into fast-lane speak? we shouldn't need to run anything direct from commandline
    # 3. should we not be breaking things up a bit more? having a standard 'build' method that all the other methods call?
    # 4. should we be trying to store the IPA in artifactory at some stage?
    # 5. do we care that the build that goes into staging will not have the same number as the equivalent build going into production? (because circleCI build number..)

    commit = last_git_commit
    upload_to_testflight(changelog: commit[:message],
     skip_waiting_for_build_processing: true,
    )

  end

  lane :build_custom_changelog do
    changelog_notes = changelog_from_git_commits(
      merge_commit_filtering: "include_merges",
      commits_count: "25"
    )

    UI.message "Changelog: #{changelog_notes}"
    
    changelog_notes
    
  end

end
